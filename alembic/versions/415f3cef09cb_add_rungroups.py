"""add_rungroups

Revision ID: 415f3cef09cb
Revises: 5b8e7f27f1cf
Create Date: 2025-08-06 17:09:54.044835

"""

from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "415f3cef09cb"
down_revision: Union[str, None] = "5b8e7f27f1cf"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "run_group",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("csip_aus_version", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user_.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )

    # Prepopulate the run group table with a "default group" for each user (we are going to force the run group id to
    # match the current user id)
    op.execute(
        """INSERT INTO run_group (id, user_id, name, csip_aus_version)
           SELECT user_id as id, user_id, 'Default Group' as name, 'v1.2' as csip_aus_version from user;"""
    )
    op.execute("SELECT setval('run_group_id_seq',  nextval('user_id_seq'));")  # Roll the ID sequence forward

    # The run_group_id column can now be copied direct from the user_id column (before we drop it)
    op.add_column("run", sa.Column("run_group_id", sa.Integer(), nullable=False))
    op.execute("UPDATE run SET run_group_id=user_id;")

    op.drop_index(op.f("user_id_run_status_idx"), table_name="run")
    op.drop_index(op.f("user_id_testprocedure_id_run_id_idx"), table_name="run")
    op.create_index("run_group_id_run_status_idx", "run", ["run_group_id", "run_status"], unique=False)
    op.create_index(
        "run_group_id_testprocedure_id_run_id_idx",
        "run",
        ["run_group_id", "testprocedure_id", sa.literal_column("id DESC")],
        unique=False,
    )
    op.drop_constraint(op.f("run_user_id_fkey"), "run", type_="foreignkey")
    op.create_foreign_key(None, "run", "run_group", ["run_group_id"], ["id"])
    op.drop_column("run", "user_id")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("run", sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, "run", type_="foreignkey")
    op.create_foreign_key(op.f("run_user_id_fkey"), "run", "user_", ["user_id"], ["id"])
    op.drop_index("run_group_id_testprocedure_id_run_id_idx", table_name="run")
    op.drop_index("run_group_id_run_status_idx", table_name="run")
    op.create_index(
        op.f("user_id_testprocedure_id_run_id_idx"),
        "run",
        ["user_id", "testprocedure_id", sa.literal_column("id DESC")],
        unique=False,
    )
    op.create_index(op.f("user_id_run_status_idx"), "run", ["user_id", "run_status"], unique=False)
    op.drop_column("run", "run_group_id")
    op.drop_table("run_group")
    # ### end Alembic commands ###
